---
aliases:
  - &start_wrapper_builds
    build-router-start:
      inputs:
        - access_token: "${BITRISE_ACCESS_TOKEN}"
        - environment_key_list: |-
            API_TOKEN
            WORKFLOW_ID
        - workflows: |-
            test-and-build

  - &create_dot_env_file
    script@1:
      inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            ./scripts/setup_env.sh

format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: flutter

workflows:
  test-and-build:
    envs:
      - BITRISE_FLUTTER_PROJECT_LOCATION: example/
    steps:
      - *create_dot_env_file
      - certificate-and-profile-installer@1: {}
      - flutter-installer@0: {}
      - cache-pull@2: {}
      - script@1:
          title: Dart format
          inputs:
            - content: dart format ./ --line-length 120 --fix --set-exit-if-changed
      - flutter-analyze@0: {}
      - script@1:
          title: Dart Analyze
          inputs:
            - content: dart pub publish --dry-run
      - script@1:
          title: Reactivate JunitReport
          inputs:
            - content: flutter pub global activate junitreport
      - flutter-test@1:
          inputs:
            - generate_code_coverage_files: "yes"
      - flutter-build@0:
          inputs:
            - project_location: example/
            - additional_build_params: "--build-number=$BITRISE_BUILD_NUMBER"
            - is_debug_mode: "true"
      - xcode-archive@5:
          title: Build Example App
          inputs:
            - project_path: example/ios/Runner.xcworkspace
            - scheme: Runner
            - distribution_method: enterprise
            - xcodebuild_options: "-derivedDataPath example/derived_data -quiet"
            - output_tool: xcpretty
      - cache-push@2: {}
      - deploy-to-bitrise-io@2: {}

  Applause-Build:
    envs:
      - API_TOKEN: "${APPLAUSE_API_TOKEN}"
      - WORKFLOW_ID: "${APPLAUSE_WORKFLOW_ID}"
    steps:
      - *start_wrapper_builds

  Applause-Real-Data-Build:
    envs:
      - API_TOKEN: "${APPLAUSE_REAL_DATA_API_TOKEN}"
      - WORKFLOW_ID: "${APPLAUSE_REAL_DATA_WORKFLOW_ID}"
    steps:
      - *start_wrapper_builds

  Dogfooding-Build:
    envs:
      - API_TOKEN: "${DOGFOODING_API_TOKEN}"
      - WORKFLOW_ID: "${DOGFOODING_WORKFLOW_ID}"
    steps:
      - *start_wrapper_builds
